#!/usr/bin/env bash
### end common-components/bash-shebang

# ASSUMPTIONS
# 1. Zsh is your current shell
# 2. Git is already installed

# Welcome to the Tripcraft Rails deployment script. We forked the Thoughtbot script
# after they abandoned linux support.

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch $HOME/.zshrc
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  printf 'export PATH="$HOME/.bin:$PATH"\n' >> ~/.zshrc
  export PATH="$HOME/.bin:$PATH"
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end common-components/shared-functions

if ! grep -qiE 'precise|quantal|wheezy|raring|jessie|saucy|trusty' /etc/os-release; then
  fancy_echo "Sorry! we don't currently support that distro."
  exit 1
fi
### end linux-components/distro-check

fancy_echo "Updating system packages ..."
  if command -v aptitude >/dev/null; then
    fancy_echo "Using aptitude ..."
  else
    fancy_echo "Installing aptitude ..."
    sudo apt-get install -y aptitude
  fi

  sudo aptitude update
### end linux-components/debian-package-update

fancy_echo "Installing git, for source control management ..."
  sudo aptitude install -y git

fancy_echo "Installing base ruby build dependencies ..."
  sudo aptitude build-dep -y ruby2.1

fancy_echo "Installing libraries for common gem dependencies ..."
  sudo aptitude install -y libxslt1-dev libcurl4-openssl-dev libksba8 libksba-dev libqtwebkit-dev libreadline-dev

fancy_echo "Installing sqlite3, for prototyping database-backed rails apps"
 sudo aptitude install -y libsqlite3-dev sqlite3

# we don't really use this
# fancy_echo "Installing Postgres, a good open source relational database ..."
# sudo aptitude install -y postgresql postgresql-server-dev-all

# or this
# fancy_echo "Installing Redis, a good key-value database ..."
# sudo aptitude install -y redis-server

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  sudo aptitude install -y exuberant-ctags

fancy_echo "Installing vim ..."
  sudo aptitude install -y vim-gtk

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  sudo aptitude install -y tmux

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  sudo aptitude install -y imagemagick

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  sudo aptitude install -y watch

fancy_echo "Installing curl ..."
  sudo aptitude install -y curl

# fancy_echo "Installing zsh ..."
# sudo aptitude install -y zsh
fancy_echo "Installing pg dev libraries ..."
  sudo aptitude install -y libpq-dev

fancy_echo "Installing node, to render the rails asset pipeline ..."
  sudo aptitude install -y nodejs
### end linux-components/debian-derivative-packages

# fancy_echo "Changing your shell to zsh ..."
#  chsh -s $(which zsh)
### end common-components/zsh

if [[ ! -d "$HOME/.rbenv" ]]; then
  fancy_echo "Installing rbenv, to change Ruby versions ..."
    git clone git://github.com/sstephenson/rbenv.git ~/.rbenv

    if ! grep -qs "rbenv init" ~/.zshrc; then
      printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.zshrc
      printf 'eval "$(rbenv init - --no-rehash)"\n' >> ~/.zshrc
    fi

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/rbenv-gem-rehash" ]]; then
  fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
    git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  fancy_echo "Installing ruby-build, to install Rubies ..."
    git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
fi
### end linux-components/rbenv

# Currently incrementing this manually. Formly was a wget to thoughtbot server
RUBY_VERSION="2.2.2"

fancy_echo "Installing Ruby $RUBY_VERSION ..."
  rbenv install $RUBY_VERSION

fancy_echo "Setting $RUBY_VERSION as global default Ruby ..."
  rbenv global $RUBY_VERSION
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(nproc)
  bundle config --global jobs $((number_of_cores - 1))
### end linux-components/bundler

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  [[ -f ~/.laptop.local ]] && source ~/.laptop.local
### end common-components/personal-additions


#### UNTESTED ######

# ATTEMPTS TO INSTALL NGINX
# Install Phusion's PGP key to verify packages
gpg --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
gpg --armor --export 561F9B9CAC40B2F7 | sudo apt-key add -

# Add HTTPS support to APT
sudo apt-get install apt-transport-https

# Add the passenger repository
sudo sh -c "echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main' >> /etc/apt/sources.list.d/passenger.list"
sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
sudo apt-get update

# Install nginx and passenger
sudo apt-get -y install nginx-full passenger

# install mongo
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
#echo "deb http://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list
#sudo apt-get update
#sudo apt-get install -y mongodb-org
#sudo service mongod start

